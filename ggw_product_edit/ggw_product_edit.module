<?php
function ggw_product_edit_menu() {
		$items['admin/upc-database'] = array(
  			'title' => 'UPC Code Callback',
  			'type' => MENU_CALLBACK,
			'description' => 'Loads data from upc code.',
			'page callback' => 'ggw_product_upc_fetch',
			'access arguments' => array('create products'),
			'file path' => drupal_get_path('module', 'ggw_product_edit').'/include',
			'file' => 'upcdatabase.inc'
  			// Page callback, etc. need to be added here.
		);

		$items['admin/inconsistent-tickets'] = array(
			'title' => 'Inconsistent Tickets',
  			'type' => MENU_CALLBACK,
			'description' => 'Loads tickets that are inconsistent.',
			'page callback' => 'ggw_inconsitent_tickets',
			'access arguments' => array('view all orders')
		);

		$items['admin/duplicate-transactions'] = array(
			'title' => 'Duplicate Transactions',
			'type' => MENU_CALLBACK,
			'description' => 'Loads tickets that have duplicate transactions.',
			'page callback' => 'ggw_duplicate_transactions',
			'access arguments' => array('view all orders')
		);

		$items['admin/empty-checkouts'] = array(
			'title' => 'Empty Checkouts',
			'type' => MENU_CALLBACK,
			'description' => 'Loads tickets that have empty checkouts.',
			'page callback' => 'ggw_duplicate_empty_checkouts',
			'access arguments' => array('view all orders')
		);

		$items['admin/open-tickets-log'] = array(
			'title' => 'Open Tickets Log',
			'type' => MENU_CALLBACK,
			'description' => 'Display a log of open tickets.',
			'page callback' => 'ggw_open_tickets_log',
			'access arguments' => array('view all orders')
		);

		return $items;
}

function ggw_open_tickets_log() {
	$tickets = db_query("
	SELECT tl.ticket_id, u.uid AS euid, u.name, uc.uid, ucc.name AS cname, uc.created, tl.`timestamp` FROM pos_api_expose_ticket_log tl
	INNER JOIN uc_orders uc ON tl.ticket_id = uc.order_id
	INNER JOIN users u ON tl.uid = u.uid
	LEFT JOIN users ucc ON uc.uid = ucc.uid
	WHERE uc.order_status = 'pos_in_progress' AND (ABS(tl.`timestamp`- uc.created) >= 0) AND (ABS(tl.`timestamp` - uc.created) <= 5)
	ORDER BY tl.ticket_id DESC");

	$header = array('Ticket ID', 'Employee', 'Customer', 'Date Created');
	$rows = array();
	while($row = db_fetch_object($tickets)) {
		if($row->uid) {
			$customer = l($row->cname, 'user/'.$row->uid);
		} else {
			$customer = 'Walk-in Customer';
		}

		$rows[] = array(
			l($row->ticket_id, 'admin/store/orders/'.$row->ticket_id),
			l($row->name, 'user/'.$row->euid),
			$customer,
			date("j/m/Y h:ia", $row->created)
		);
	}

	return theme('table', $header, $rows);
}

function ggw_duplicate_empty_checkouts() {
	$cash_log_table = 'pos_api_expose_cash_log';
	$check_log_table = 'pos_api_expose_check_log';
	$mo_log_table = 'pos_api_expose_money_order_log';
	$cc_log_table = 'pos_api_expose_credit_card_log';
	$transac_log_table = 'pos_api_expose_transaction_log';

	$transacs = db_query("SELECT tl.credit_usage_id, tl.cash_pid, tl.rma_pid, tl.cc_pid, tl.check_pid, tl.mo_pid, tl.amount, tl.pid, tl.cuid, tl.uid, tl.timestamp, tl.register_id, tl.ticket_id, cl.amount_paid AS cash_paid, cl.change AS change_made, cl.total AS cash_total, chl.paid_amount AS check_payment, chl.check_number, chl.post_dated AS check_post_dated, chl.cash_date AS check_cash_date, ccl.amount_paid AS cc_amount, mo.paid_amount AS mo_paid_amount, mo.reference AS mo_ref, cu.credit_amount AS ar_payment_amount, ccl.transaction_id FROM {".$transac_log_table."} tl
	LEFT JOIN {".$cash_log_table."} cl ON tl.cash_pid = cl.pid
	LEFT JOIN {".$cc_log_table."} ccl ON tl.cc_pid = ccl.pid
	LEFT JOIN {".$check_log_table."} chl ON tl.check_pid = chl.pid
	LEFT JOIN {".$mo_log_table."} mo ON tl.mo_pid = mo.pid
	LEFT JOIN {user_term_credits_usages} cu ON tl.credit_usage_id = cu.cuid
	WHERE tl.amount = '0'");

	$header = array('Date', 'Register', 'Invoice', 'Customer', 'Total', 'Payby', 'Payment', 'Transaction Type', 'Ticket #', 'Employee');
	$rows = array();
	$total_transacs = 0;
	$rma_cash_out = 0;
	//Stats
	while($transac = db_fetch_object($transacs)) {
		$show_row = true;
		$payby = '';
		$payment = '';
		if($transac->cash_pid) {
			if($transac->cash_paid > 0 || $transac->change_made > 0) {
				$payby .= 'CASH<br />';
				$payby .= 'CHANGE<br />';
				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->cash_paid), false).'<br />';
				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->change_made), false).'<br />';
			}
		}

		if($transac->cc_pid) {
			$payby .= 'Credit Card';
			if($transac->transaction_id) {
				$payby .= ' - '.$transac->transaction_id;
			}
			$payby .= '<br />';
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->cc_amount), false).'<br />';
		}

		if($transac->check_pid) {
			if($transac->check_post_dated) {
				$payby .= 'POST DATED CHECK';
				if($transac->check_number) {
					$payby .= ' - '.$transac->check_number;
				}
				$payby .= '<br />';
				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->check_payment), false);
				$payment .= ' - '.$transac->check_cash_date.'<br />';
			} else {
				$payby .= 'CHECK';
				if($transac->check_number) {
					$payby .= ' - '.$transac->check_number.'<br />';
				} else {
					$payby .= '<br />';
				}

				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->check_payment), false);
				$payment .= '<br />';
			}
		}

		if($transac->mo_pid) {
			if($transac->mo_ref) {
				$payby .= 'Money Order - '.$transac->mo_ref.'<br />';
			} else {
				$payby .= 'Money Order'.'<br />';
			}
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->mo_paid_amount), false).'<br />';
		}

		if($transac->credit_usage_id) {
			$payby .= 'AR'.'<br />';
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->ar_payment_amount), false);
		}

		$ticket_type = 'SALE';
		if($transac->rma_pid < 0) {
			$payby .= 'RMA CASH OUT'.'<br />';
			$rma_cash_out += $transac->amount;
			$transac->amount = (-1)*$transac->amount;
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->amount), false);
		} else if($transac->rma_pid > 0) {
			$rma = db_result(db_query("SELECT (-1)*total_refund FROM pos_api_expose_rma_refund_log WHERE pid = '%d'", $transac->rma_pid));
			if($rma > 0) {
				$ticket_type = 'SALE w/ RMA';
				$payby .= 'RMA DEBIT'.'<br />';
			} else {
				$show_row = false;
				$ticket_type = 'RMA';
				$payby .= 'RMA CREDIT'.'<br />';
				$transac->ticket_id = db_result(db_query("SELECT rma_ticket_id FROM {pos_api_expose_rma_refund_log} WHERE pid = '%d'", $transac->rma_pid));
			}
			$payment .= uc_currency_format(user_term_credits_recursive_round($rma), false).'<br />';
			if($rma < 0) {
				$transac->amount = (-1)*$transac->amount;
			}
		}

		if($transac->amount > 0) {
			$total_transacs += $transac->amount;
		}

		if($show_row) {
			$rows[] = array(
				date('n/j/Y', $transac->timestamp),
				$transac->register_id,
				$transac->pid,
				_ggw_state_reporting_cust_name($transac->cuid),
				uc_currency_format(user_term_credits_recursive_round($transac->amount), false),
				$payby,
				$payment,
				$ticket_type,
				l($transac->ticket_id, 'admin/store/orders/'.$transac->ticket_id, array('attributes' => array('target' => '_blank'))),
				_ggw_state_reporting_cust_name($transac->uid)
			);
		}
	}

	return theme('table', $header, $rows);
}

function ggw_duplicate_transactions() {
	//$transacs = db_query("SELECT ");

	$cash_log_table = 'pos_api_expose_cash_log';
	$check_log_table = 'pos_api_expose_check_log';
	$mo_log_table = 'pos_api_expose_money_order_log';
	$cc_log_table = 'pos_api_expose_credit_card_log';
	$transac_log_table = 'pos_api_expose_transaction_log';

	$transacs = db_query("SELECT tl.credit_usage_id, tl.cash_pid, tl.rma_pid, tl.cc_pid, tl.check_pid, tl.mo_pid, tl.amount, tl.pid, tl.cuid, tl.uid, tl.timestamp, tl.register_id, tl.ticket_id, cl.amount_paid AS cash_paid, cl.change AS change_made, cl.total AS cash_total, chl.paid_amount AS check_payment, chl.check_number, chl.post_dated AS check_post_dated, chl.cash_date AS check_cash_date, ccl.amount_paid AS cc_amount, mo.paid_amount AS mo_paid_amount, mo.reference AS mo_ref, cu.credit_amount AS ar_payment_amount, ccl.transaction_id FROM {".$transac_log_table."} tl
	LEFT JOIN {".$cash_log_table."} cl ON tl.cash_pid = cl.pid
	LEFT JOIN {".$cc_log_table."} ccl ON tl.cc_pid = ccl.pid
	LEFT JOIN {".$check_log_table."} chl ON tl.check_pid = chl.pid
	LEFT JOIN {".$mo_log_table."} mo ON tl.mo_pid = mo.pid
	LEFT JOIN {user_term_credits_usages} cu ON tl.credit_usage_id = cu.cuid
	WHERE tl.ticket_id IN (SELECT tl2.ticket_id FROM pos_api_expose_transaction_log tl2 GROUP BY tl2.ticket_id HAVING COUNT(*) > 1)");

	$header = array('Date', 'Register', 'Invoice', 'Customer', 'Total', 'Payby', 'Payment', 'Transaction Type', 'Ticket #', 'Employee');
	$rows = array();
	$total_transacs = 0;
	$rma_cash_out = 0;
	//Stats
	while($transac = db_fetch_object($transacs)) {
		$show_row = true;
		$payby = '';
		$payment = '';
		if($transac->cash_pid) {
			if($transac->cash_paid > 0 || $transac->change_made > 0) {
				$payby .= 'CASH<br />';
				$payby .= 'CHANGE<br />';
				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->cash_paid), false).'<br />';
				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->change_made), false).'<br />';
			}
		}

		if($transac->cc_pid) {
			$payby .= 'Credit Card';
			if($transac->transaction_id) {
				$payby .= ' - '.$transac->transaction_id;
			}
			$payby .= '<br />';
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->cc_amount), false).'<br />';
		}

		if($transac->check_pid) {
			if($transac->check_post_dated) {
				$payby .= 'POST DATED CHECK';
				if($transac->check_number) {
					$payby .= ' - '.$transac->check_number;
				}
				$payby .= '<br />';
				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->check_payment), false);
				$payment .= ' - '.$transac->check_cash_date.'<br />';
			} else {
				$payby .= 'CHECK';
				if($transac->check_number) {
					$payby .= ' - '.$transac->check_number.'<br />';
				} else {
					$payby .= '<br />';
				}

				$payment .= uc_currency_format(user_term_credits_recursive_round($transac->check_payment), false);
				$payment .= '<br />';
			}
		}

		if($transac->mo_pid) {
			if($transac->mo_ref) {
				$payby .= 'Money Order - '.$transac->mo_ref.'<br />';
			} else {
				$payby .= 'Money Order'.'<br />';
			}
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->mo_paid_amount), false).'<br />';
		}

		if($transac->credit_usage_id) {
			$payby .= 'AR'.'<br />';
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->ar_payment_amount), false);
		}

		$ticket_type = 'SALE';
		if($transac->rma_pid < 0) {
			$payby .= 'RMA CASH OUT'.'<br />';
			$rma_cash_out += $transac->amount;
			$transac->amount = (-1)*$transac->amount;
			$payment .= uc_currency_format(user_term_credits_recursive_round($transac->amount), false);
		} else if($transac->rma_pid > 0) {
			$rma = db_result(db_query("SELECT (-1)*total_refund FROM pos_api_expose_rma_refund_log WHERE pid = '%d'", $transac->rma_pid));
			if($rma > 0) {
				$ticket_type = 'SALE w/ RMA';
				$payby .= 'RMA DEBIT'.'<br />';
			} else {
				$show_row = false;
				$ticket_type = 'RMA';
				$payby .= 'RMA CREDIT'.'<br />';
				$transac->ticket_id = db_result(db_query("SELECT rma_ticket_id FROM {pos_api_expose_rma_refund_log} WHERE pid = '%d'", $transac->rma_pid));
			}
			$payment .= uc_currency_format(user_term_credits_recursive_round($rma), false).'<br />';
			if($rma < 0) {
				$transac->amount = (-1)*$transac->amount;
			}
		}

		if($transac->amount > 0) {
			$total_transacs += $transac->amount;
		}

		if($show_row) {
			$rows[] = array(
				date('n/j/Y', $transac->timestamp),
				$transac->register_id,
				$transac->pid,
				_ggw_state_reporting_cust_name($transac->cuid),
				uc_currency_format(user_term_credits_recursive_round($transac->amount), false),
				$payby,
				$payment,
				$ticket_type,
				l($transac->ticket_id, 'admin/store/orders/'.$transac->ticket_id, array('attributes' => array('target' => '_blank'))),
				_ggw_state_reporting_cust_name($transac->uid)
			);
		}
	}

	return theme('table', $header, $rows);
}

function ggw_inconsitent_tickets() {
	$tickets = db_query("SELECT cu.cuid, cu.uid, cu.ticket_id, cu.amount, o.order_total, cl.amount_paid, cl.change, cl.total, o.created, o.modified
		FROM pos_api_expose_transaction_log cu
		INNER JOIN uc_orders o ON cu.ticket_id = o.order_id
		LEFT JOIN pos_api_expose_cash_log cl ON cu.cash_pid = cl.pid
		WHERE ABS(cu.amount-o.order_total) > '0.01'");

	$header = array('Customer', 'Employee', 'Ticket #', 'Closed Amount', 'Current Invoice Amount', 'Cash Paid', 'Change Made', 'Ticket Closing Amount', 'Date Created', 'Date Modified');
	$rows = array();
	while($ticket = db_fetch_object($tickets)) {
		$rows[] = array(
			_ggw_state_reporting_cust_name($ticket->cuid),
			_ggw_state_reporting_cust_name($ticket->uid),
			l($ticket->ticket_id, 'admin/store/orders/'.$ticket->ticket_id),
			uc_currency_format($ticket->amount),
			uc_currency_format($ticket->order_total),
			uc_currency_format($ticket->amount_paid),
			uc_currency_format($ticket->change),
			uc_currency_format($ticket->total),
			date('n/j/Y g:i A', $ticket->created),
			date('n/j/Y g:i A', $ticket->modified)
		);
	}

	return theme('table', $header, $rows);
}

function ggw_product_edit_form_alter(&$form, $form_state, $form_id) {
	if($form_id == 'product_node_form' && $form['#node']->type == 'product') {
		drupal_add_css(drupal_get_path('module', 'ggw_product_edit').'/css/ggw_profile_edit.css');
		drupal_add_js(drupal_get_path('module', 'ggw_product_edit').'/js/ggw_barcode.js');

		foreach($form as $attr => $form_attr) {
			if($attr != 'base' && $attr != 'options' && is_array($form_attr) && $form_attr['#type'] == 'fieldset') {
				$form[$attr]['#attributes'] = array('class' => 'hidden-fieldset');
			} elseif($attr == 'options') {
				$form[$attr]['#attributes'] = array('class' => 'publishing-options');
			}
		}

		$form['base']['dimensions']['#attributes'] = array('class' => 'hidden-fieldset');
		$form['base']['shippable']['#attributes'] = array('class' => 'hidden-form-element');
		$form['base']['weight']['weight']['#attributes'] = array('class' => 'hidden-form-element');
		$form['base']['weight']['weight_units']['#attributes'] = array('class' => 'hidden-form-element');

		$form['vendors'] = array(
			'#type' => 'fieldset',
			'#title' => 'Supplying Vendors',
			'#weight' => 50,
			'#attributes' => array('class' => 'supplying-vendor')
		);

		$form['vendors']['supplier'] = array(
			'#type' => 'select',
			'#options' => pos_stock_management_vendors(FALSE),
			'#multiple' => true,
			'#default_value' => ggw_product_vendors_defaults($form['#node']->nid)
		);
	}
	
	if(strpos($form_id, 'uc_product_add_to_cart_form') !== FALSE) {
		global $user;
		if(empty($user->uid)) {
			unset($form['submit']);
			unset($form['#submit']);
			unset($form['#validate']);
			unset($form['qty']);
			unset($form['nid']);
		}
	}
	
	if(strpos($form_id, 'uc_product_add_to_cart_form_') !== FALSE) {
		//dpm($form);
		$form['#submit'][] = 'ggw_product_edit_add_to_cart_handler';
	}
}

function ggw_product_edit_add_to_cart_handler($form, &$form_state) {
	drupal_goto('node/'.$form['nid']['#value']);
}

function ggw_product_vendors_defaults($nid) {
	if(db_result(db_query("SELECT COUNT(*) FROM {ggw_product_vendors} WHERE product_nid = %d", $nid)) == 0) {
		return array(0);
	} else {
		$vendors = db_query("SELECT * FROM {ggw_product_vendors} WHERE product_nid = %d", $nid);
		$default_values = array();
		while($vendor = db_fetch_object($vendors)) {
			$default_values[$vendor->vendor_uid] = $vendor->vendor_uid;
		}
		
		return $default_values;
	}
}

function ggw_product_edit_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	if($node->type == 'product') {
		if($op == 'validate' || $op == 'delete') {
			db_query("DELETE FROM {ggw_product_vendors} WHERE product_nid = %d", $node->nid);
		}
		
		if($op == 'validate') {
			drupal_add_css(drupal_get_path('module', 'ggw_product_edit').'/css/ggw_profile_edit.css');
	
			$base_query = "INSERT INTO {ggw_product_vendors} VALUES (%d, %d)";
			
			if(count($a3['vendors']['supplier']['#value']) > 1 && isset($a3['vendors']['supplier']['#value']["0"])) {
				form_set_error('supplier', 'You cannot select vendors, when no vendors are associated.');
				return;
			}
			
			if(!isset($a3['vendors']['supplier']['#value']["0"])) {
				foreach($a3['vendors']['supplier']['#value'] as $vendor_id) {
					db_query($base_query, $node->nid, $vendor_id);
				}
			}
		}
	}
}
