<?php
function user_term_credits_form_alter(&$form, $form_state, $form_id) {
	if ($form_id == 'uc_payment_methods_form') {
    	/* Hide the POS payment methods so they can't be enabled */
    	unset($form['pmtable']['pos_term_credit']);
	}
}

function user_term_credits_perm() {
	return array('administer user term credits', 'edit user term credits', 'use user term credits', 'view own term credit report');
}

function user_term_credits_menu() {
  $items['user/%user/term-credits'] = array(
    'title' => 'User Term Credits',
    'description' => 'View your credit history.',
    'page callback' => 'utc_credit_report',
    'page arguments' => array(1),
    'access callback' => 'utc_view_credit_report',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  
  $items['user/%user/term-credits/settle/%'] = array(
    'title' => 'Credit Usages',
    'description' => 'Perform a credit settlement.',
    'page callback' => 'utc_perform_settlement',
    'page arguments' => array(1, 4),
    'access arguments' => array('administer user term credits'),
    'file' => 'includes/settlement_form.inc',
    'type' => MENU_LOCAL_TASK
  );

  $items['user/%user/term-credits/auto-settle'] = array(
    'title' => 'Auto Settle',
    'description' => 'Perform a credit settlement.',
    'page callback' => 'utc_perform_auto_settlement',
    'page arguments' => array(1),
    'access arguments' => array('administer user term credits'),
    'type' => MENU_LOCAL_TASK
  );

  $items['user/%user/term-credits/payment-history'] = array(
    'title' => 'Payment History',
    'description' => 'Display customer payment history.',
    'page callback' => 'utc_payment_history',
    'page arguments' => array(1),
    'access arguments' => array('administer user term credits'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/payment_history.inc'
  );

  $items['user/%user/term-credits/payment-history/pos'] = array(
    'title' => 'Payment History',
    'description' => 'Display customer payment history.',
    'page callback' => 'utc_payment_history_pos',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/payment_history.inc'
  );

  $items['user/%user/term-credits/invoice-history'] = array(
    'title' => 'Invoice History',
    'description' => 'Display customer invoice history.',
    'page callback' => 'utc_invoice_history',
    'page arguments' => array(1),
    'access arguments' => array('administer user term credits'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/payment_history.inc'
  );

  $items['user/%user/term-credits/invoice-history/pos'] = array(
    'title' => 'Invoice History',
    'description' => 'Display customer invoice history.',
    'page callback' => 'utc_invoice_history_pos',
    'page arguments' => array(1),
    'access arguments' => array('administer user term credits'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/payment_history.inc'
  );

  $items['user/%user/term-credits/customer-statement'] = array(
    'title' => 'Customer Statement',
    'description' => 'Display customer statement.',
    'page callback' => 'utc_customer_statement',
    'page arguments' => array(1),
    'access arguments' => array('administer user term credits'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/payment_history.inc'
  );

  return $items;
}

function utc_perform_auto_settlement($user) {
	return drupal_get_form('utc_perform_auto_settlement_form', $user);
}

function utc_perform_auto_settlement_form(&$form_state, $user) {
	drupal_add_css(drupal_get_path('module', 'user_term_credits').'/css/settlement_form.css');
	$form = array();

	$outstanding_payments = db_result(db_query("SELECT SUM(utcu.credit_amount) FROM {user_term_credits_usages} utcu WHERE utcu.uid = '%d' AND utcu.settled = 0", $user->uid));

	$partial_payments = db_result(db_query("SELECT SUM(utcs.settlement_amount) FROM {user_term_credits_settlements} utcs INNER JOIN {user_term_credits_usages} utcu ON utcu.cuid = utcs.cuid WHERE utcu.uid = '%d' AND utcu.settled = 0", $user->uid));

	$amount_left = $outstanding_payments-$partial_payments;

	$content .= '<div class="info"><span class="label">Customer: </span>'.l($user->name, 'user/'.$user->uid.'/term-credits').'</div>';

	$content .= '<div class="info"><span class="label">Total Owed: </span>'.variable_get('uc_currency_sign', '$').number_format($outstanding_payments, 2).'</div>';

	$content .= '<div class="info"><span class="label">Amount Settled: </span>'.variable_get('uc_currency_sign', '$').number_format($partial_payments, 2).'</div>';

	$content .= '<div class="info"><span class="label">Amount Left: </span>'.variable_get('uc_currency_sign', '$').number_format($amount_left, 2).'</div>';


	$form['settlement'] = array(
		'#type' => 'fieldset',
		'#title' => 'Auto Settlement',
		'#attributes' => array('class' => 'settlement'),
		'#tree' => true
	);

	$form['uid'] = array(
		'#type' => 'value',
		'#value' => $user->uid
	);

	$form['amount_left'] = array(
		'#type' => 'value',
		'#value' => $amount_left
	);

	$form['settlement']['info'] = array(
		'#type' => 'markup',
		'#value' => $content
	);

	$form['settlement']['amount'] = array(
		'#type' => 'textfield',
		'#title' => 'Amount Settled',
		'#field_prefix' => '$',
		'#default_value' => number_format($amount_left, 2, '.', '')
	);

	$form['settlement']['type'] = array(
		'#type' => 'select',
		'#title' => 'Settlement Type',
		'#options' => _utc_get_payment_map(),
		'#required' => true,
	);

	$form['settlement']['remarks'] = array(
		'#type' => 'textarea',
		'#title' => 'Remarks / Check Date'
	);

	$form['settlement']['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Create Settlement'
	);

	return $form;
}

function utc_perform_auto_settlement_form_submit($form, &$form_state) {
	$values = $form_state['values'];
	
	$total_amount = number_format($values['settlement']['amount'], 2, '.', '')*100;
	$total_left = number_format($values['amount_left'], 2, '.', '')*100;

	$usages = db_query("SELECT utcu.cuid, utcu.credit_amount - ifnull(sums.paid, 0) AS owed
		FROM {user_term_credits_usages} utcu
		LEFT JOIN (SELECT SUM(settlement_amount) AS paid, utcs.cuid FROM {user_term_credits_settlements} utcs INNER JOIN {user_term_credits_usages} utcu2 ON utcu2.cuid = utcs.cuid WHERE utcu2.uid = '%d') sums ON utcu.cuid = sums.cuid
		WHERE utcu.uid = '%d' AND utcu.settled = '0'
		ORDER BY utcu.consumption_date DESC", $values['uid'], $values['uid']);

	while($usage = db_fetch_object($usages)) {
		$amount = number_format($values['settlement']['amount'], 2, '.', '')*100;
		$left = number_format($usage->owed, 2, '.', '')*100;
		if($amount > $left) {
			db_query("INSERT INTO {user_term_credits_settlements}
		(cuid, settlement_amount, payment_type, remarks, settlement_date)
		VALUES
		('%d', '%s', '%s', '%s', '%s')", $usage->cuid, $left/100, $values['settlement']['type'], $values['settlement']['remarks'], time());

			$amount = $amount - $left;

			//Set Settled
			db_query("UPDATE {user_term_credits_usages} SET settled = '1' WHERE cuid = '%d'", $usage->cuid);
		} else {

			db_query("INSERT INTO {user_term_credits_settlements}
		(cuid, settlement_amount, payment_type, remarks, settlement_date)
		VALUES
		('%d', '%s', '%s', '%s', '%s')", $usage->cuid, $amount/100, $values['settlement']['type'], $values['settlement']['remarks'], time());

			if($amount == $left) {
				//Set Settled
				db_query("UPDATE {user_term_credits_usages} SET settled = '1' WHERE cuid = '%d'", $usage->cuid);
			}

			break;
		}
	}

	if($total_amount == $total_left) {
		drupal_goto("user/".$values['uid']."/term-credits");
	}
}

function utc_perform_auto_settlement_form_validate($form, &$form_state) {
	$values = $form_state['values'];

	//Take care of floating point precision issue to be very accurate.
	$amount = number_format($values['settlement']['amount'], 2, '.', '')*100;
	$left = number_format($values['amount_left'], 2, '.', '')*100;

	if($amount > $left) {
		form_set_error('settlement][amount', "Please input an amount less than the remaining balance of $".number_format($values['amount_left'], 2).".");
	}

	if($amount == 0) {
		form_set_error('settlement][amount', "Please insert an amount more than $".number_format(0, 2).".");
	}
}

function _utc_get_payment_map() {
	return array('cash' => 'Cash', 'check' => 'Check', 'money_order' => 'Money Order', 'post_check' => 'Post Dated Check', 'pos_payment' => 'POS Payment');
}

function utc_credit_report($order_user) {
	$content = '<div class="user-term-credits-report">';
	$content .= '<p><span>Allocated Credit: </span>'.$order_user->credit_limits->credit_limit_view.'</p>';
	$content .= '<p><span>Available Credit: </span>'.$order_user->credit_limits->available_credit_view.'</p>';
	$content .= '<p><span>Amount Due: </span>'.$order_user->credit_limits->pending_payments_view.'</p>';
	$content .= '<p><span>Credit Term Limit: </span>'.$order_user->credit_limits->term_limit.' Days</p>';
	$content .= utc_generate_credits_table($order_user->uid);
	$content .= '</div>';
	return $content;
}

function utc_credit_report_pos($order_user) {
	$response = array();
	$response['credit_limit'] = $order_user->credit_limits->credit_limit;
	$response['available_credit'] = $order_user->credit_limits->available_credit;
	$response['pending_payments'] = $order_user->credit_limits->pending_payments;
	$response['term_limit'] = $order_user->credit_limits->term_limit;
	$response['usages'] = utc_generate_credits_table($order_user->uid, false, 10);

	return $response;
}

function utc_generate_credits_table($uid = 0, $settlement_links = true, $limit = false) {
	drupal_add_css(drupal_get_path('module', 'user_term_credits').'/css/user_term_credits_table.css');
	$query = "SELECT * FROM {user_term_credits_usages} utcu WHERE utcu.credit_amount > 0";
	if($uid) {
		$query .= ' AND utcu.uid = %d';
	}

	$query .= ' ORDER BY utcu.settled ASC, utcu.due_date ASC';

	if($limit) {
		$credit_usages = pager_query($query, $limit, 0, NULL, $uid);
	} else {
		$limit = 50;
		$credit_usages = pager_query($query, 50, 0, NULL, $uid);
	}

	if($settlement_links) {
		$header = array('Customer', 'Order #', 'Credit Used', 'Term Limit', 'Purchase Date', 'Due Date', 'Settlements');
	} else {
		$header = array('Customer', 'Order #', 'Credit Used', 'Term Limit', 'Purchase Date', 'Due Date');
	}

	$rows = array();
	$time = time();
	while($credit_usage = db_fetch_object($credit_usages)) {
		$user = user_load(array('uid' => $credit_usage->uid));

		if($credit_usage->settled) {
			$class = 'settled-true';
		} else {
			if($time > $credit_usage->due_date) {
				$class = 'settled-exceeded';
			} else {
				$class = 'settled-false';
			}
		}
		if($settlement_links) {
			$rows[] = array('data' => array(
				l($user->name, 'user/'.$user->uid),
				l($credit_usage->order_id, 'admin/store/orders/'.$credit_usage->order_id),
				variable_get('uc_currency_sign', '$').number_format($credit_usage->credit_amount, 2),
				$credit_usage->term_limit.' Days',
				date('n/j/Y h:iA', $credit_usage->consumption_date),
				date('n/j/Y h:iA', $credit_usage->due_date),
				utc_generate_settlements_table($credit_usage->cuid, $uid)
			), 'class' => $class);
		} else {
			$rows[] = array('data' => array(
				l($user->name, 'user/'.$user->uid),
				l($credit_usage->order_id, 'admin/store/orders/'.$credit_usage->order_id),
				variable_get('uc_currency_sign', '$').number_format($credit_usage->credit_amount, 2),
				$credit_usage->term_limit.' Days',
				date('n/j/Y h:iA', $credit_usage->consumption_date),
				date('n/j/Y h:iA', $credit_usage->due_date)
			), 'class' => $class);
		}
	}

	$content = theme('table', $header, $rows, array('class' => 'user-term-credits-table')).theme('pager', NULL, $limit);

	$content .= '<div class="legend">';
	$content .= '<div class="legend-item"><div class="legend-box settled-true"></div><div class="legend-content">Paid Off</div></div>';
	$content .= '<div class="legend-item"><div class="legend-box settled-false"></div><div class="legend-content">Payment Due</div></div>';
	$content .= '<div class="legend-item"><div class="legend-box settled-exceeded"></div><div class="legend-content">Past Due</div></div>';
	$content .= '</div>';
	return $content;
}

function utc_generate_settlements_table($cuid = 0, $uid) {
	$settlements = db_query("SELECT * FROM {user_term_credits_settlements} utcs WHERE utcs.cuid = %d", $cuid);
	
	$header = array();
	$rows = array();
	
	while($settlement = db_fetch_object($settlements)) {
		$header[] = date('n/j/Y', $settlement->settlement_date);
		$rows[] = variable_get('uc_currency_sign', '$').number_format($settlement->settlement_amount, 2);
	}

	$rows = array(0 => $rows);

	return theme('table', $header, $rows, array('class' => 'user-credits-settlements-table sticky-disabled')).l('View Settlements', 'user/'.$uid.'/term-credits/settle/'.$cuid, array('attributes' => array('class' => 'view-settlements')));
}

function utc_view_credit_report($order_user) {
	global $user;
	return user_access('administer user term credits') || ($order_user->uid == $user->uid && user_access('view own term credit report'));
}

function user_term_credits_user($op, &$edit, &$account, $category = NULL) {
	if(($op == 'form' || $op == 'register') && user_access('edit user term credits')) {
		$form = array();

		$form['user_term_credits'] = array(
			'#type' => 'fieldset',
			'#title' => t('Credit Term'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE
		);

		$form['user_term_credits']['credit_limit'] = array(
			'#type' => 'textfield',
			'#title' => t('Credit Limit'),
			'#required' => TRUE,
			'#default_value' => 0,
			'#size' => 20
		);

		$form['user_term_credits']['term_limit'] = array(
			'#type' => 'select',
			'#title' => t('Term Limit'),
			'#options' => array(10 => '10 Days', 15 => '15 Days', 20 => '20 Days', 30 => '30 Days', 60 => '60 Days')
		);
		
		$form['user_term_credits']['term_note'] = array(
			'#type' => 'textfield',
			'#title' => t('Term Notes'),
			'#default_value' => '',
			'#size' => 20
		);

		if($op == 'form') {
			$credits = _user_term_credits_getCredits($account->uid);
			$form['user_term_credits']['credit_limit']['#default_value'] = number_format($credits->credit_limit, 2, '.', '');
			$form['user_term_credits']['term_limit']['#default_value'] = $credits->term_limit;
			$form['user_term_credits']['term_note']['#default_value'] = $credits->term_note;
		}

		return $form;
	} else if($op == 'validate' && user_access('edit user term credits')) {
		if(!is_numeric($edit['credit_limit'])) {
			form_set_error('credit_limit', 'A numerical credit limit is required.');
		}
	} elseif(($op == 'insert' || $op == 'update') && user_access('edit user term credits')) {
		_user_term_credits_saveCredits($account->uid, $edit['credit_limit'], $edit['term_limit'], $edit['term_note']);
	} elseif($op == 'load') {
		$account->credit_limits = _user_term_credits_getCredits($account->uid);
	}
}

function _user_term_credits_saveCredits($uid, $creditLimit, $termLimit, $termNote) {
	db_query("REPLACE INTO {user_term_credits_limits} VALUES(%d, '%s', '%s', '%s');", $uid, $creditLimit, $termLimit, $termNote);
}

function _user_term_credits_getCredits($uid, $history_before = false) {
	$credits = db_fetch_object(db_query("SELECT utcl.credit_limit, utcl.term_limit, utcl.term_note FROM {user_term_credits_limits} utcl WHERE utcl.uid = %d", $uid));
	
	if(empty($credits->credit_limit)) {
		$credits->credit_limit = 0;
	}/* else {
		$credits->credit_limit = (float)$credits->credit_limit;
	}*/
	
	if(empty($credits->term_limit)) {
		$credits->term_limit = 10;
	} else {
		$credits->term_limit = (int)$credits->term_limit;
	}

	$sign = variable_get('uc_currency_sign', '$');

	if($history_before) {
		$query = "SELECT SUM(utcu.credit_amount) FROM {user_term_credits_usages} utcu WHERE utcu.uid = %d AND utcu.settled = 0 AND utcu.consumption_date < '%s'";
		$pquery = "SELECT SUM(utcs.settlement_amount) FROM {user_term_credits_settlements} utcs INNER JOIN {user_term_credits_usages} utcu ON utcu.cuid = utcs.cuid WHERE utcu.uid = %d AND utcu.settled = 0 AND utcs.settlement_date < '%s'";

		$outstanding_payments = db_result(db_query($query, $uid, $history_before));
		$partial_payments = db_result(db_query($pquery, $uid, $history_before));
	} else {
		$query = "SELECT SUM(utcu.credit_amount) FROM {user_term_credits_usages} utcu WHERE utcu.uid = %d AND utcu.settled = 0";
		$pquery = "SELECT SUM(utcs.settlement_amount) FROM {user_term_credits_settlements} utcs INNER JOIN {user_term_credits_usages} utcu ON utcu.cuid = utcs.cuid WHERE utcu.uid = %d AND utcu.settled = 0";

		$outstanding_payments = db_result(db_query($query, $uid));
		$partial_payments = db_result(db_query($pquery, $uid));
	}
	
	//$credits->available_credit = (float)$credits->credit_limit - (float)$outstanding_payments + (float)$partial_payments;
	//$credits->pending_payments = (float)$outstanding_payments - (float)$partial_payments;
	$available_bc = bcsub($credits->credit_limit, $outstanding_payments, 6);
	$available_bc = bcadd($available_bc, $partial_payments, 6);
	$credits->available_credit = $available_bc;

	$credits->pending_payments = user_term_credits_recursive_round(bcsub($outstanding_payments, $partial_payments, 6));

	$credits->pending_payments_view = $sign.number_format($credits->pending_payments, 2);
	$credits->available_credit_view = $sign.number_format($credits->available_credit, 2);
	$credits->credit_limit_view = $sign.number_format($credits->credit_limit, 2);

	return $credits;
}

function user_term_credits_recursive_round($number) {
	//Round up up to a 3rd of a penny.
	return round(round($number, 3, PHP_ROUND_HALF_UP), 2, PHP_ROUND_HALF_DOWN);
}

function user_term_credits_payment_method() {
	$methods[] = array(
		'id' => 'pos_term_credit',
		'name' => t('POS Term Credit'),
		'title' => t('Term Credit through Point of Sales system'),
		'desc' => t('Pay with users assigned credit, Point of Sales only.'),
		'callback' => 'uberpos_method_payment_term_credit',
		'weight' => 1,
		'checkout' => TRUE,
		'no_gateway' => TRUE,
	);

	return $methods;
}

function user_term_credits_preprocess_node(&$variables) {
  $node = $variables['node'];
  switch ($node->type) {
    case 'profile':
      if (arg(0) == 'node' && arg(1) == $node->nid && arg(2) == "") {
      // If we are postitive we are on node/N where N is the NID of a profile
      // node, then redirect to the user profile page instead.
      drupal_goto("user/".$node->uid);
    }
  }
}

function user_term_credits_theme() {
  return array(
    'payment_history_report' => array(
      'template' => 'templates/payment-history-report',
      'arguments' => array('content' => null, 'uid' => null, 'report_title' => null)
    )
  );
}